# This chart uses the sharding method for distributing data across multiple machines. 
# This is meant for deployments with very large data sets and high throughput operations.
# 
# https://docs.mongodb.com/manual/sharding/
# https://artifacthub.io/packages/helm/bitnami/mongodb-sharded
# https://github.com/bitnami/charts/tree/master/bitnami/mongodb-sharded
#
# Look at the following link to understand the setup of the cluster:
# https://docs.mongodb.com/manual/sharding/#sharded-cluster
# There are three main component types.
# 1. The mongos pods act as query routers, providing an interface between client applications and the sharded cluster
# 2. The shard pods contains a subset of the sharded data. Each shard can be deployed as a replica set.
# 3. The config pods store metadata and configuration settings for the cluster
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mongodb-sharded
  namespace: argocd
spec:
  destination:
    namespace: mongodb
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: mongodb-sharded
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: 3.9.14 # Chart version 3.9.14, Mongo version 4.4.10
    helm:
      parameters:
      - name: commonLabels
        value: {
          "app": "mongodb-sharded"
        }
      - name: global.storageClass # Config Srv and Data Shards use persistent volumes
        value: "rook-ceph-block" # This matches the Storage Class created with rook-ceph
      - name: shards # Number of shards to be created
        value: 3
      - name: configsvr.replicas # Number of configsvr replicas
        value: 1
      - name: configsvr.podLabels
        value: {
          "mongo-component": "configsvr"
        }
      - name: configsvr.nodeSelector
        value: {
          "node-class": "mongo"
        }
      - name: configsvr.tolerations
        value: [
          "only-mongo=true:NoSchedule"
        ]
      - name: mongos.replicas # Number of mongos/router replicas
        value: 3
      - name: mongos.podLabels
        value: {
          "mongo-component": "mongos"
        }
      - name: mongos.nodeSelector
        value: {
          "node-class": "mongo"
        }
      - name: mongos.tolerations
        value: [
          "only-mongo=true:NoSchedule"
        ]
      - name: mongos.affinity
        value: {
          # Pod Anti Affinity will try to avoid putting pods that have labels defined here
          # This definition will try and avoid co-locating mongos pods on the same node
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: mongo-component
                  operator: In
                  values:
                  - mongos
              topologyKey: "kubernetes.io/hostname"
        }
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
