# https://eksctl.io/usage/schema/
#

apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  # Name of your cluster, change to whatever you find fit.
  # If changed, make sure to change all nodegroup tags from 
  # 'k8s.io/cluster-autoscaler/cluster-name: "owned"' --> 'k8s.io/cluster-autoscaler/your-new-name: "owned"'
  name: araneae
  # choose your region wisely, this will significantly impact the cost incurred
  region: us-west-2 # Oregon
  # Kubernetes version 
  version: '1.25' 
  tags:
    # Add more cloud tags if needed for billing
    environment: development
    creator: paloul
    project: araneae
    cluster: araneae

iam:
  # https://eksctl.io/usage/schema/#iam-withOIDC
  withOIDC: true

vpc:
  cidr: 10.10.0.0/16
  # https://eksctl.io/usage/vpc-networking/#nat-gateway
  nat:
    gateway: HighlyAvailable # other options: Disable, Single (default), HighlyAvailable 

  # https://eksctl.io/usage/vpc-networking/#managing-access-to-the-kubernetes-api-server-endpoints
  clusterEndpoints:
    publicAccess:  true   # Should eventually be false, just for security sake
    privateAccess: true

# Add all possible AZs to ensure nodes can be spun up in any AZ later on. 
# THIS CAN'T BE CHANGED LATER. YOU WILL HAVE TO CREATE A NEW CLUSTER TO ADD NEW AZ SUPPORT.
# This list applies to the whole cluster and isn't specific to nodegroups
availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]

nodeGroups:
  - name: ng-util
    desiredCapacity: 6
    minSize: 3
    maxSize: 15
    volumeSize: 30
    volumeType: gp3
    instanceType: c5.large 
    availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
    enableDetailedMonitoring: true
    asgMetricsCollection:
      # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
      - granularity: 1Minute
        metrics:
          - GroupMinSize
          - GroupMaxSize
          - GroupDesiredCapacity
          - GroupInServiceInstances
          - GroupPendingInstances
          - GroupStandbyInstances
          - GroupTerminatingInstances
          - GroupTotalInstances
    labels:
      node-class: "utility"
      storage-node: "false" #  The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
    tags:
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/node-template/label/node-class: utility
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/araneae: "owned"
    iam:
      withAddonPolicies:
        autoScaler: true
        cloudWatch: true
        externalDNS: true
        certManager: true
        awsLoadBalancerController: true

  - name: ng-data
    desiredCapacity: 3
    minSize: 3
    maxSize: 15
    volumeSize: 30
    volumeType: gp3
    instanceType: i3.large # EBS + 1 x 475 NVMe SSD, 2 core, 15.25 gb mem, Up to 10gbps net
    availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
    enableDetailedMonitoring: true
    asgMetricsCollection:
      # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
      - granularity: 1Minute
        metrics:
          - GroupMinSize
          - GroupMaxSize
          - GroupDesiredCapacity
          - GroupInServiceInstances
          - GroupPendingInstances
          - GroupStandbyInstances
          - GroupTerminatingInstances
          - GroupTotalInstances
    labels:
      node-class: "data"
      storage-node: "true" # Rook-Ceph CSI plugin pods will not run on nodes where Storage-Node is true
    taints:
      storage-node: "true:NoSchedule"
    tags:
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/node-template/label/node-class: "data"
      k8s.io/cluster-autoscaler/node-template/label/storage-node: "true"
      k8s.io/cluster-autoscaler/node-template/taint/storage-node: "true:NoSchedule"
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/araneae: "owned"
    iam:
      withAddonPolicies:
        ebs: true # True because data nodes need the AWS EBS CSI Driver https://docs.aws.amazon.com/eks/latest/userguide/ebs-csi.html
        autoScaler: true
        cloudWatch: true
        awsLoadBalancerController: true
    # Prebootstrap Commands set up the file system on the instance drive, 
    #  but Rook-Ceph needs to know only the device path, it formats itself
    # preBootstrapCommands: 
    #   - "mkfs -t ext4 /dev/nvme1n1"
    #   - "mkdir -p /ephemeral"
    #   - "mount /dev/nvme1n1 /ephemeral"
    #   - "chown ec2-user:ec2-user /ephemeral"

  - name: ng-kubeflow
    desiredCapacity: 6
    minSize: 3
    maxSize: 15
    volumeSize: 30
    volumeType: gp3
    instanceType: r5.xlarge
    availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
    enableDetailedMonitoring: true
    asgMetricsCollection:
      # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
      - granularity: 1Minute
        metrics:
          - GroupMinSize
          - GroupMaxSize
          - GroupDesiredCapacity
          - GroupInServiceInstances
          - GroupPendingInstances
          - GroupStandbyInstances
          - GroupTerminatingInstances
          - GroupTotalInstances
    labels:
      node-class: "kubeflow"
      storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
    taints:
      only-kubeflow: "true:NoSchedule"
    tags:
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/node-template/label/node-class: kubeflow
      k8s.io/cluster-autoscaler/node-template/taint/only-kubeflow: "true:NoSchedule"
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/araneae: "owned"
    iam:
      withAddonPolicies:
        autoScaler: true
        cloudWatch: true
        awsLoadBalancerController: true

  # - name: ng-frontend
  #   desiredCapacity: 1
  #   minSize: 1
  #   maxSize: 4
  #   volumeSize: 30
  #   volumeType: gp3
  #   instanceType: t3.medium
  #   availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
  #   enableDetailedMonitoring: true
  #   asgMetricsCollection:
  #     # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
  #     - granularity: 1Minute
  #       metrics:
  #         - GroupMinSize
  #         - GroupMaxSize
  #         - GroupDesiredCapacity
  #         - GroupInServiceInstances
  #         - GroupPendingInstances
  #         - GroupStandbyInstances
  #         - GroupTerminatingInstances
  #         - GroupTotalInstances
  #   labels:
  #     node-class: "front-end"
  #     storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
  #   taints:
  #     only-frontend: "true:NoSchedule"
  #   tags:
  #     # EC2 tags required for cluster-autoscaler auto-discovery
  #     k8s.io/cluster-autoscaler/node-template/label/node-class: front-end
  #     k8s.io/cluster-autoscaler/node-template/taint/only-frontend: "true:NoSchedule"
  #     k8s.io/cluster-autoscaler/enabled: "true"
  #     k8s.io/cluster-autoscaler/araneae: "owned"
  #   iam:
  #     withAddonPolicies:
  #       albIngress: true
  #       autoScaler: true
  #       cloudWatch: true

  # - name: ng-reasoner
  #   desiredCapacity: 3
  #   minSize: 3
  #   maxSize: 12
  #   volumeSize: 30
  #   volumeType: gp3
  #   instanceType: r5n.2xlarge
  #   availabilityZones: ["us-west-2a"]
  #   enableDetailedMonitoring: true
  #   asgMetricsCollection:
  #     # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
  #     - granularity: 1Minute
  #       metrics:
  #         - GroupMinSize
  #         - GroupMaxSize
  #         - GroupDesiredCapacity
  #         - GroupInServiceInstances
  #         - GroupPendingInstances
  #         - GroupStandbyInstances
  #         - GroupTerminatingInstances
  #         - GroupTotalInstances
  #   labels:
  #     node-class: "reasoner"
  #     storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
  #   taints:
  #     only-reasoner: "true:NoSchedule"
  #   tags:
  #     # EC2 tags required for cluster-autoscaler auto-discovery
  #     k8s.io/cluster-autoscaler/node-template/label/node-class: reasoner
  #     k8s.io/cluster-autoscaler/node-template/taint/only-reasoner: "true:NoSchedule"
  #     k8s.io/cluster-autoscaler/enabled: "true"
  #     k8s.io/cluster-autoscaler/araneae: "owned"
  #   iam:
  #     withAddonPolicies:
  #       albIngress: true
  #       autoScaler: true
  #       cloudWatch: true

  # - name: ng-cache
  #   desiredCapacity: 1
  #   minSize: 1
  #   maxSize: 3
  #   volumeSize: 30
  #   volumeType: gp3
  #   instanceType: r5n.large
  #   availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
  #   enableDetailedMonitoring: true
  #   asgMetricsCollection:
  #     # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
  #     - granularity: 1Minute
  #       metrics:
  #         - GroupMinSize
  #         - GroupMaxSize
  #         - GroupDesiredCapacity
  #         - GroupInServiceInstances
  #         - GroupPendingInstances
  #         - GroupStandbyInstances
  #         - GroupTerminatingInstances
  #         - GroupTotalInstances
  #   labels:
  #     node-class: "cache"
  #     storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
  #   taints:
  #     only-cache: "true:NoSchedule"
  #   tags:
  #     # EC2 tags required for cluster-autoscaler auto-discovery
  #     k8s.io/cluster-autoscaler/node-template/label/node-class: cache
  #     k8s.io/cluster-autoscaler/node-template/taint/only-cache: "true:NoSchedule"
  #     k8s.io/cluster-autoscaler/enabled: "true"
  #     k8s.io/cluster-autoscaler/araneae: "owned"
  #   iam:
  #     withAddonPolicies:
  #       albIngress: true
  #       autoScaler: true
  #       cloudWatch: true

  # - name: ng-queue
  #   desiredCapacity: 3
  #   minSize: 3
  #   maxSize: 3
  #   volumeSize: 30
  #   volumeType: gp3
  #   instanceType: r5n.large
  #   availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
  #   enableDetailedMonitoring: true
  #   asgMetricsCollection:
  #     # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
  #     - granularity: 1Minute
  #       metrics:
  #         - GroupMinSize
  #         - GroupMaxSize
  #         - GroupDesiredCapacity
  #         - GroupInServiceInstances
  #         - GroupPendingInstances
  #         - GroupStandbyInstances
  #         - GroupTerminatingInstances
  #         - GroupTotalInstances
  #   labels:
  #     node-class: "queue"
  #     storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
  #   taints:
  #     only-queue: "true:NoSchedule"
  #   tags:
  #     # EC2 tags required for cluster-autoscaler auto-discovery
  #     k8s.io/cluster-autoscaler/node-template/label/node-class: queue
  #     k8s.io/cluster-autoscaler/node-template/taint/only-queue: "true:NoSchedule"
  #     k8s.io/cluster-autoscaler/enabled: "true"
  #     k8s.io/cluster-autoscaler/araneae: "owned"
  #   iam:
  #     withAddonPolicies:
  #       albIngress: true
  #       autoScaler: true
  #       cloudWatch: true

  # - name: ng-stream
  #   desiredCapacity: 3
  #   minSize: 3
  #   maxSize: 6
  #   volumeSize: 30
  #   volumeType: gp3
  #   instanceType: r5n.xlarge
  #   availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
  #   enableDetailedMonitoring: true
  #   asgMetricsCollection:
  #     # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
  #     - granularity: 1Minute
  #       metrics:
  #         - GroupMinSize
  #         - GroupMaxSize
  #         - GroupDesiredCapacity
  #         - GroupInServiceInstances
  #         - GroupPendingInstances
  #         - GroupStandbyInstances
  #         - GroupTerminatingInstances
  #         - GroupTotalInstances
  #   labels:
  #     node-class: "stream"
  #     storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
  #   taints:
  #     only-stream: "true:NoSchedule"
  #   tags:
  #     # EC2 tags required for cluster-autoscaler auto-discovery
  #     k8s.io/cluster-autoscaler/node-template/label/node-class: stream
  #     k8s.io/cluster-autoscaler/node-template/taint/only-stream: "true:NoSchedule"
  #     k8s.io/cluster-autoscaler/enabled: "true"
  #     k8s.io/cluster-autoscaler/araneae: "owned"
  #   iam:
  #     withAddonPolicies:
  #       albIngress: true
  #       autoScaler: true
  #       cloudWatch: true

  # - name: ng-mongo
  #   desiredCapacity: 
  #   minSize: 1
  #   maxSize: 1
  #   volumeSize: 30
  #   volumeType: gp3
  #   instanceType: r5.large
  #   availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
  #   enableDetailedMonitoring: true
  #   asgMetricsCollection:
  #     # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
  #     - granularity: 1Minute
  #       metrics:
  #         - GroupMinSize
  #         - GroupMaxSize
  #         - GroupDesiredCapacity
  #         - GroupInServiceInstances
  #         - GroupPendingInstances
  #         - GroupStandbyInstances
  #         - GroupTerminatingInstances
  #         - GroupTotalInstances
  #   labels:
  #     node-class: "mongo"
  #     storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
  #   taints:
  #     only-mongo: "true:NoSchedule"
  #   tags:
  #     # EC2 tags required for cluster-autoscaler auto-discovery
  #     k8s.io/cluster-autoscaler/node-template/label/node-class: mongo
  #     k8s.io/cluster-autoscaler/node-template/taint/only-mongo: "true:NoSchedule"
  #     k8s.io/cluster-autoscaler/enabled: "true"
  #     k8s.io/cluster-autoscaler/araneae: "owned"
  #   iam:
  #     withAddonPolicies:
  #       albIngress: true
  #       autoScaler: true
  #       cloudWatch: true

  # - name: ng-postgres
  #   desiredCapacity: 3
  #   minSize: 3
  #   maxSize: 6
  #   volumeSize: 30
  #   volumeType: gp3
  #   instanceType: r5n.large
  #   availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
  #   enableDetailedMonitoring: true
  #   asgMetricsCollection:
  #     # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
  #     - granularity: 1Minute
  #       metrics:
  #         - GroupMinSize
  #         - GroupMaxSize
  #         - GroupDesiredCapacity
  #         - GroupInServiceInstances
  #         - GroupPendingInstances
  #         - GroupStandbyInstances
  #         - GroupTerminatingInstances
  #         - GroupTotalInstances
  #   labels:
  #     node-class: "postgres"
  #     storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
  #   taints:
  #     only-postgres: "true:NoSchedule"
  #   tags:
  #     # EC2 tags required for cluster-autoscaler auto-discovery
  #     k8s.io/cluster-autoscaler/node-template/label/node-class: postgres
  #     k8s.io/cluster-autoscaler/node-template/taint/only-postgres: "true:NoSchedule"
  #     k8s.io/cluster-autoscaler/enabled: "true"
  #     k8s.io/cluster-autoscaler/araneae: "owned"
  #   iam:
  #     withAddonPolicies:
  #       albIngress: true
  #       autoScaler: true
  #       cloudWatch: true

  # - name: ng-cassandra
  #   desiredCapacity: 3
  #   minSize: 3
  #   maxSize: 6
  #   volumeSize: 30
  #   volumeType: gp3
  #   instanceType: r5n.xlarge
  #   availabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]
  #   enableDetailedMonitoring: true
  #   asgMetricsCollection:
  #     # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html
  #     - granularity: 1Minute
  #       metrics:
  #         - GroupMinSize
  #         - GroupMaxSize
  #         - GroupDesiredCapacity
  #         - GroupInServiceInstances
  #         - GroupPendingInstances
  #         - GroupStandbyInstances
  #         - GroupTerminatingInstances
  #         - GroupTotalInstances
  #   labels:
  #     node-class: "cassandra"
  #     storage-node: "false" # The CSI plugin pods must run where user applications run and not where Rook or Ceph pods are run.
  #   taints:
  #     only-cassandra: "true:NoSchedule"
  #   tags:
  #     # EC2 tags required for cluster-autoscaler auto-discovery
  #     k8s.io/cluster-autoscaler/node-template/label/node-class: cassandra
  #     k8s.io/cluster-autoscaler/node-template/taint/only-cassandra: "true:NoSchedule"
  #     k8s.io/cluster-autoscaler/enabled: "true"
  #     k8s.io/cluster-autoscaler/araneae: "owned"
  #   iam:
  #     withAddonPolicies:
  #       albIngress: true
  #       autoScaler: true
  #       cloudWatch: true
